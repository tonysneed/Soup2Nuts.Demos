Soup to Nuts Final Demo: Before ReadMe

Prerequisites:

1. Visual Studio 2013 Community or Professional with Update 4 or later.
   https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx
2. EF 6.x Tools for Visual Studio
   http://www.microsoft.com/en-us/download/details.aspx?id=40762
3. Entity Framework Power Tools
   http://visualstudiogallery.msdn.microsoft.com/72a60b14-1581-4b9b-89f2-846072eff19d
4. Trackable Entities for VS 2013 v2.5 or later
   https://visualstudiogallery.msdn.microsoft.com/74e6d323-c827-48be-90da-703a9fa8f530
5. Simple MVVM Toolkit v5.5 or later
   https://visualstudiogallery.msdn.microsoft.com/b2d3cf62-61e0-49a9-a12e-a3be24d0431f
   - Update NuGet packages to 5.5.1 or later
6. Scaled down version of the Northwind sample database:
   http://bit.ly/northwindslim.

Steps to re-create the 'Before' solution:

1. Create a new project, select Trackable category, select:
   Trackable Web API Application with Repository and Unit of Work
   - Select Separate Client/Server Entities, Portable

2. Place NorthwindSlim.mdf in App_Data folder of WebApi project.
   - Add following to connectionStrings section of web.config:
    <add name="NorthwindSlimContext" connectionString="Data Source=(localdb)\v11.0;AttachDbFilename=|DataDirectory|\NorthwindSlim.mdf;Integrated Security=True;MultipleActiveResultSets=True" providerName="System.Data.SqlClient" />
   - This will add a data connection to the VS Server Explorer

3. Reverse engineer Code First entities from NorthwindSlim.mdf
   - Right-click SoupToNuts.Final.Entities.Service.Net45, Add New Item.
   - Select Data, ADO.NET Entity Data Model, enter name of NorthwindSlim
   - Select option for Code First from Database
   - Select NorthwindSlim, leave connection string option unchecked
   - Answer No to prompt for copying database file
   - Select all tables
   - Build the solution

4. Add Repository Interfaces to the Service.Persistence project.
   - Right-click the Repositories folder, Add New Item, Trackable category,
	 select "Entity Repository Interface"
	 > Enter an interface name: ICustomerRepository
	 > Select a trackable entity from the drop down in wizard: Customer
	 > Enter the entity set name for the entity, for example: Customers
     > Remove DeleteCustomer method
     > For GetCustomer, change parameter from int to string
   - Add IOrderRepository interface, selecting Order and typing Orders
     > Add following method:
       Task<IEnumerable<Order>> GetOrders(string customerId);
   - Add IProductRepository interface, with a GetProducts method

5. Add Unit of Work Interfaces to the Service.Persistence project.
   - Right-click the UnitsOfWork folder, Add New Item, Trackable category,
	 select "Example Unit of Work Interface"
	 > Enter a name: INorthwindUnitOfWork
	 > Add read-only properties for each entity repository interface:
	   ICustomerRepository CustomerRepository { get; }
	   IOrderRepository OrderRepository { get; }
	   - NOTE: You will need to resolve namespaces for the Entity Repository Interfaces
		 by adding the required using directives.


6. Add a Database Context Interface to the Service.EF project
   - Right-click the Contexts folder, Add New Item, Trackable category,
	 select "Database Context Interface"
	 > Enter an interface name: INorthwindSlimContext
	 > Add IDbSet<Entity> properties for each entity set on the DbContext class, for example:
        IDbSet<Category> Categories { get; set; }
        IDbSet<Customer> Customers { get; set; }
        IDbSet<CustomerSetting> CustomerSettings { get; set; }
        IDbSet<Order> Orders { get; set; }
        IDbSet<OrderDetail> OrderDetails { get; set; }
        IDbSet<Product> Products { get; set; }
        IDbSet<Employee> Employees { get; set; }
        IDbSet<Territory> Territories { get; set; }
	   - NOTE: You will need to resolve namespaces for the entity classes by adding the 
		 required using directive.

7. Copy the DbContext generated by the EF Power Tools from the Entities.Service project
   to the Contexts folder in the Service.EF project
   - Rename to NorthwindSlimContext and update namespace to match project name
   - Delete the NorthwindSlim class from the Service.Entities project
   - Next, modify the NorthwindSlimContext class to implement the Database Context Interface you just added:
	 public partial class NorthwindSlimContext : DbContext, INorthwindSlimContext
   - Then change each DbSet property to IDbSet, so that interface is implemented
   - Build the solution

8. Add Entity Repository Classes to the Service.EF project
   - Right-click the Repositories folder, Add New Item, Trackable category,
	 select "Entity Repository Class"
	 > Enter an class name: CustomerRepository
	 > Select a trackable entity from the drop down list in the wizard
	   and enter an entity set name: Customer, Customers
	   - NOTE: Change the parameter type for the Get and Delete methods
		 to match the primary key property of the entity:
		 Task<Customer> GetCustomer(string id);
		 Task<bool> DeleteCustomer(string id);
     > Remove TODO comments
	 > Remove Delete method
   - Rename IDatabaseContext to match the name of the Database Context Interface
     you added earlier: INorthwindSlimContext
   - Add another Entity Repository Class: OrderRepository,
	 replacing the Data Context Interface as before: INorthwindSlimContext
   - Fulfill each TODO by adding includes:
	 .Include(o => o.Customer)
	 .Include("OrderDetails.Product")
   - Add method: GetOrders(string customerId)
   - Add another Entity Repository Class: ProductRepository with GetProducts
   - Build the solution

9. Add a Unit of Work class to the Service.EF project
   - Right-click the UnitsOfWork folder, Add New Item, Trackable category,
	 select "Example Unit of Work Class"
	 > Enter a class name that matches the Unit of Work Interface added earlier
	   to the Service.Persistence project: NorthwindUnitOfWork
   - Add read-only fields for each entity repository interface:
	 private readonly IProductRepository _productRepository
   - Modify the class ctor by renaming IDatabaseContext to match the context
	 interface you added earlier: INorthwindSlimContext
   - Initialize each entity repository field using the ctor parameters:

		private readonly ICustomerRepository _customerRepository;
		private readonly IOrderRepository _orderRepository;
        private readonly IProductRepository _productRepository;

        public NorthwindUnitOfWork(INorthwindSlimContext context,
            ICustomerRepository customerRepository,
            IOrderRepository orderRepository,
            IProductRepository productRepository) :
            base(context as DbContext)
        {
            _customerRepository = customerRepository;
            _orderRepository = orderRepository;
            _productRepository = productRepository;
        }

   - Next add read-only property for each entity repository interface, for example:

		public ICustomerRepository CustomerRepository
		{
			get { return _customerRepository; }
		}

		public IOrderRepository OrderRepository
		{
			get { return _orderRepository; }
		}

        public IProductRepository ProductRepository
        {
            get { return _productRepository; }
        }

   - Build the solution

10. Add Entity Web API Controllers to the WebApi project
   - Right-click the Controllers folder, Add New Item, Trackable category,
	 select "Entity Web API Controller"
	 > Enter a name that matches an entity: CustomerController
   - Rename IExampleUnitOfWork to match Unit of Work Interface added to Persistence project: INorthwindUnitOfWork
	 > Change the parameter type for the Get and Delete methods
	   to match the primary key property of the entity:
	   Task<Customer> GetCustomers(string id);
     > Remove other methods: Post, Put, Delete
   - Add another contoller: ProductController
     > Just include a GetProducts method
   - Add another contoller: OrderController
   - Add other Get methods supported by the Entity Repository Interface:

	// GET api/Order?customerId=ABCD
	[ResponseType(typeof(IEnumerable<Order>))]
	public async Task<IHttpActionResult> GetOrders(string customerId)
	{
		IEnumerable<Order> orders = await _unitOfWork.OrderRepository.GetOrders(customerId);
		return Ok(orders);
	}

   - Build the solution

11. Configure the IoC container to register required types on startup of the WebApi app
   - Open SimpleInjectorWebApiInitializer.cs from with the App_Start folder
   - Uncomment the using directives: EF.Contexts, EF.Repositories, EF.UnitsOfWork, 
	 Persistence.Repositories, Persistence.UnitsOfWork
   - Register Context, UnitofWork and Repositories with the container.
	 > For this example, simply uncomment the four lines of code in IoCConfig:

	container.RegisterWebApiRequest<INorthwindSlimContext, NorthwindSlimContext>();
	container.RegisterWebApiRequest<INorthwindUnitOfWork, NorthwindUnitOfWork>();
	container.RegisterWebApiRequest<ICustomerRepository, CustomerRepository>();
	container.RegisterWebApiRequest<IOrderRepository, OrderRepository>();
	container.RegisterWebApiRequest<IProductRepository, ProductRepository>();

12. Run the Web Api project to test the controller
	- Press F5 or Ctrl+F5 to run the WebApi project
	- Click the API link on the home page
	- Select an operation, such as GetCustomers or GetOrder
	- Click the Test API button, fill out the form and click Send
	  > You should see JSON for the response body

13. Reverse engineer trackable entities for Client.Entities project
	- Right-click, Entity Framework, Reverse Engineer Code First
	  > Enter the connection information: server, database name
	  > For this sample we are using the NorthwindSlim database
	- Delete the Mapping folder
	- Delete the data context class: NorthwindSlimContext
	- Build the solution

14. Lastly, flesh out code in the ConsoleClient project to invoke
	controller actions for the Web API service.
	- Uncomment code in Program.Main
	- If needed replace the port number for HttpClient with that shown in the
	  Web API home page.
	- Set the ConsoleClient project as the startup project for the solution,
	  then press F5 or Ctrl+F5 to run the console client app
	- Press Enter to start the client
	  > You should see all the customers in the database printed to the console
	  > Enter a customer id to retrieve orders for that customer, for example: ALFKI
		You should see a list of orders for the selected customer
	  > Enter one of the order id's shown to retrieve that order with details
	- Then press Etner to create a new order for the selected customer
	  You should see a new order with three new order details
	- Press Enter to update the newly created order
	  You should see that the the first order detail's price has increased,
	  the second order detail was deleted, the third order detail was left unchanged,
	  and a new order detail was added
	- Press Enter to delete the udpated order
	- Press Enter to exit the console app
	- NOTE: To debug the ConsoleClient and WebApi project at the same time, simply
	  set the startup projects for the solution to start both. Then set a breakpoint
	  in the desired controller action.